@page "/expense-tracker"
@inject ExpenseHound.Services.ExpenseService ExpenseService
@inject HttpClient Http
@using ExpenseHound.Models

<!-- Error flag -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<h3>Expense Tracker</h3>

<EditForm Model="newExpense" OnValidSubmit="AddExpense" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-6">
        <!-- Expense Type -->
        <div class="col-md">
            <div class="form-floating">
                <select class="form-select" id="floatingSelect" @bind="newExpense.ExpenseType">
                    <option selected>Choose an Expense Type...</option>
                    <option value="OneTime">One Time</option>
                    <option value="Recurring">Recurring</option>
                    <option value="Fixed">Fixed</option>
                    <option value="Variable">Variable</option>
                </select>
                <label for="floatingSelect">Expense Type</label>
                <!-- Validation Message -->
                <ValidationMessage For="@(() => newExpense.ExpenseType)" />
            </div>
        </div>

        <!-- Expense Name / Description -->
        <div class="col-md">
            <div class="form-floating">
                <input type="text" class="form-control" id="floatingInputGrid" @bind="newExpense.Description" placeholder="Enter a Description" />
                <label for="floatingInputGrid">Description</label>
                <!-- Validation Message for description -->
                <ValidationMessage For="@(() => newExpense.Description)" />
            </div>
        </div>

        <!-- Expense Amount -->
        <div class="col-md">
            <div class="form-floating">
                <input type="number" step="0.01" class="form-control" id="floatingInputGrid" @bind="newExpense.Amount" placeholder="$50.00" />
                <label for="floatingInputGrid">Amount</label>
                <!-- Validation Message for amount -->
                <ValidationMessage For="@(() => newExpense.Amount)" />
            </div>
        </div>

        <!-- Expense Category -->
        <div class="col-md">
            <div class="form-floating">
                <select class="form-select" id="floatingSelect" @bind="newExpense.Category">
                    <option selected>Choose a Category...</option>
                    <option value="Groceries">Groceries</option>
                    <option value="Utilities">Utilities</option>
                    <option value="CellPhone">Cell Phone</option>
                    <option value="Transportation">Transportation</option>
                    <option value="Debt">Debt</option>
                    <option value="Rent">Rent</option>
                    <option value="Insurance">Insurance</option>
                    <option value="Entertainment">Entertainment</option>
                    <option value="Health">Health</option>
                    <option value="Education">Education</option>
                    <option value="PersonalCare">Personal Care</option>
                    <option value="Gifts">Gifts</option>
                    <option value="Subscriptions">Subscriptions</option>
                    <option value="Travel">Travel</option>
                    <option value="Home">Home</option>
                    <option value="Work">Work</option>
                    <option value="Other">Other</option>
                </select>
                <label for="floatingSelect">Category</label>
                <!-- Validation Message for Category -->
                <ValidationMessage For="@(() => newExpense.Category)" />
            </div>
        </div>

        <!-- Expense Date -->
        <div class="col-md">
            <div class="form-floating">
                <input type="date" class="form-control" id="floatingSelect" @bind="newExpense.Date" />
                <label for="floatingSelect">Date</label>
                <!-- Validation Message for Date -->
                <ValidationMessage For="@(() => newExpense.Date)" />
            </div>
        </div>

        <!-- Expense Button -->
        <div class="col-md">
            <div class="form-floating">
                <button class="form-control btn btn-primary" type="submit">Add Expense</button>
            </div>
        </div>
    </div>
</EditForm>



<h4>Expenses</h4>

@if (expenses == null)
{
    <p>Loading...</p>
}

<table class="table table-striped table-dark">
    <thead class="thead-dark">
        <tr>
            <th scope="col">Expense Type</th>
            <th scope="col">Description</th>
            <th scope="col">Amount</th>
            <th scope="col">Date</th>
            <th scope="col">Category</th>
        </tr>
    </thead>
    <tbody>
        @if (expenses != null && expenses.Any())
        {
            @foreach (var expense in expenses)
            {
                <tr>
                    <td scope="row">@expense.ExpenseType</td>
                    <td>@expense.Description</td>
                    <td>$@expense.Amount</td>
                    <td>@expense.Date.ToShortDateString()</td>
                    <td>@expense.Category</td>
                </tr>
            }
        }
        else
        {
            <p>No Expenses Available</p>
        }
    </tbody>
</table>

<h4 class="p-1">Total Expenses</h4>
@if (expenses != null && expenses.Any())
{
    decimal totalExpense = 0;
    @foreach (var expense in expenses)
    {
        totalExpense += expense.Amount;
    }
    <h5 class="p-2">Month: <i>@getMonth()</i></h5>
    <p style="margin-left: 20px;">$@totalExpense</p>
}
else
{
    <p>No Expenses</p>
}

@code {
    private string errorMessage;
    private bool descriptionError;

    private List<Expense> expenses;

    /// <summary>
    /// Initializes a new expense with the current date.
    /// </summary>
    private Expense newExpense = new Expense
        {
            Description = "Enter a Description",
            Date = DateTime.Now
        };

    protected override async Task OnInitializedAsync()
    {
        expenses = await ExpenseService.GetExpensesAsync();
    }

    private string getMonth()
    {
        int month = DateTime.Now.Month;
        string monthName = "";

        switch (month)
        {
            case 1:
                monthName = "January";
                break;
            case 2:
                monthName = "February";
                break;
            case 3:
                monthName = "March";
                break;
            case 4:
                monthName = "April";
                break;
            case 5:
                monthName = "May";
                break;
            case 6:
                monthName = "June";
                break;
            case 7:
                monthName = "July";
                break;
            case 8:
                monthName = "August";
                break;
            case 9:
                monthName = "September";
                break;
            case 10:
                monthName = "October";
                break;
            case 11:
                monthName = "November";
                break;
            case 12:
                monthName = "December";
                break;
        }
        return monthName;
    }


    /// <summary>
    /// Adds an Expense to the Expense List
    /// </summary>
    private async Task AddExpense()
    {

        // Handle expense type
        // if (newExpense.ExpenseType == "Choose an Expense Type...")
        // {
        //     errorMessage = "Please select an Expense Type.";
        //     return;
        // }
        // Handle Description error.
        // if (newExpense.Description == "Enter a Description")
        // {
        //     descriptionError = true;
        //     return;
        // }
        // Handle amount error.
        // if (newExpense.Amount == 0)
        // {
        //     errorMessage = "Please enter an amount.";
        //     return;
        // }
        // Handle Category error.
        // if (newExpense.Category == "Choose a Category...")
        // {
        //     errorMessage = "Please select a Category.";
        //     return;
        // }

        //Reset error messages
        errorMessage = null;
        descriptionError = false;

        //Add the expense to the service
        await ExpenseService.CreateExpenseAsync(new Expense
            {
                ExpenseType = newExpense.ExpenseType,
                Description = newExpense.Description,
                Amount = newExpense.Amount,
                Category = newExpense.Category,
                Date = newExpense.Date
            });

        expenses = await ExpenseService.GetExpensesAsync();
        StateHasChanged();
        //Reset form
        newExpense = new Expense { Description = "Enter a Description", Date = DateTime.Now };
    }


    /// <summary>
    /// Handles an invalid submit
    /// </summary>
    private void HandleInvalidSubmit()
    {
        errorMessage = "Please correct the errors and try again.";
    }
}
